openapi: 3.0.0
info:
  title: The Cyberia Tech Task
  version: 1.0.0
  description: This is an API for managing users and posts.

servers:
  - url: http://localhost:3000/api
    description: Local development server (localhost)

paths:
  /user/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: The username of the user
                  example: sepehr
                password:
                  type: string
                  description: The password of the user
                  example: somepassword
              required:
                - userName
                - password
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error

  /user/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: The username of the user
                  example: sepehr
                password:
                  type: string
                  description: The password of the user
                  example: somepassword
              required:
                - userName
                - password
      responses:
        200:
          description: User logged in successfully and received access token
        400:
          description: Username or password does not match

  /user/{id}:
    get:
      summary: Get a specific user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the user
      responses:
        200:
          description: User retrieved successfully
        404:
          description: User not found

  /user:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        200:
          description: A list of all users

  /post/newWithoutAuth:
    post:
      summary: Create a new post without authentication
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the post
                  example: My first post
                content:
                  type: string
                  description: The content of the post
                  example: This is the content of my first post.
                id:
                  type: integer
                  description: The ID of the user
                  example: 1
              required:
                - title
                - content
                - id
      responses:
        201:
          description: Post created successfully

  /post/new:
    post:
      summary: Create a new post with authentication
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the post
                  example: My first post
                content:
                  type: string
                  description: The content of the post
                  example: This is the content of my first post.
              required:
                - title
                - content
      responses:
        201:
          description: Post created successfully
        401:
          description: Unauthorized

  /post/{id}:
    get:
      summary: Get a specific post by ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the post
      responses:
        200:
          description: Post retrieved successfully
        404:
          description: Post not found

    patch:
      summary: Update a specific post by ID
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The new title of the post
                  example: Updated post title
                content:
                  type: string
                  description: The new content of the post
                  example: Updated post content
      responses:
        201:
          description: Post updated successfully
        401:
          description: Unauthorized
        404:
          description: Post not found

    delete:
      summary: Delete a specific post by ID
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the post
      responses:
        204:
          description: Post deleted successfully
        401:
          description: Unauthorized
        404:
          description: Post not found

  /post:
    get:
      summary: Get all posts
      tags:
        - Posts
      responses:
        200:
          description: A list of all posts

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
